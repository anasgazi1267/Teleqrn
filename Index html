<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
    <title>Ads Earn USDT</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"/>
    <style>
        :root {
            --primary-color: #ff69b4; /* Pink */
            --primary-hover: #ff85c1;
            --secondary-color: #2a2a2e;
            --background-color: #1a1a1e;
            --text-color: #e0e0e0;
            --text-muted-color: #a0a0a0;
            --accent-color: #4dc4ff; /* Light Blue */
            --card-bg: #222226;
            --gradient-start: #ff69b4;
            --gradient-end: #4dc4ff;
        }
        * {
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        body {
            margin: 0;
            padding: 0;
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: 'Poppins', 'Segoe UI', 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .container {
            width: 100%;
            max-width: 400px;
            background: var(--background-color);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }
        main {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            padding-bottom: 80px;
        }
        .view {
            display: none;
            animation: fadeIn 0.4s ease-in-out;
        }
        .view.active {
            display: block;
        }
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .user-header-card {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 15px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .user-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 15px;
            overflow: hidden;
            background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 20px;
            color: #fff;
        }
        .user-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .user-info .username {
            font-size: 18px;
            font-weight: 700;
            margin: 0;
        }
        .user-info .title {
            font-size: 14px;
            color: var(--text-muted-color);
            margin: 0;
        }
        .balance-card {
            background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
            border-radius: 16px;
            padding: 20px;
            text-align: center;
            margin-bottom: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }
        .balance-card .label {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 5px;
            color: #fff;
        }
        .balance-card .balance-value {
            font-size: 36px;
            font-weight: 800;
            margin: 0;
            letter-spacing: 1px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
            color: #fff;
        }
        .balance-card .points-value {
            font-size: 16px;
            font-weight: 600;
            color: var(--accent-color);
            margin-top: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        .section-title {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 15px;
            padding-left: 10px;
            border-left: 4px solid var(--primary-color);
            color: var(--text-color);
        }
        .task-card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: transform 0.2s ease, background-color 0.2s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .task-card:hover {
            transform: translateY(-3px);
            background-color: var(--secondary-color);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        .task-icon {
            font-size: 24px;
            color: var(--primary-color);
            margin-right: 20px;
            width: 30px;
            text-align: center;
        }
        .task-details h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }
        .task-details p {
            margin: 3px 0 0;
            font-size: 13px;
            color: var(--text-muted-color);
        }
        .task-arrow {
            margin-left: auto;
            font-size: 18px;
            color: var(--text-muted-color);
        }
        .list-item {
            display: flex;
            align-items: center;
            background: var(--card-bg);
            padding: 12px 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .list-item .rank {
            font-size: 16px;
            font-weight: 700;
            color: var(--accent-color);
            width: 30px;
            text-align: center;
        }
        .list-item .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--secondary-color);
            margin-right: 15px;
            object-fit: cover;
            border: 2px solid var(--primary-color);
        }
        .list-item .info {
            flex-grow: 1;
        }
        .list-item .info .name {
            font-weight: 600;
            font-size: 15px;
        }
        .list-item .info .detail {
            font-size: 13px;
            color: var(--text-muted-color);
        }
        .list-item .score {
            font-size: 16px;
            font-weight: 700;
            color: var(--primary-color);
        }
        .history-icon {
            color: var(--primary-color);
            margin-right: 15px;
            font-size: 18px;
        }
        .footer-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-around;
            background: var(--secondary-color);
            padding: 10px 0;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.2);
            z-index: 999;
        }
        .nav-button {
            display: flex;
            flex-direction: column;
            align-items: center;
            color: var(--text-muted-color);
            background: none;
            border: none;
            font-size: 12px;
            transition: color 0.2s ease, transform 0.2s ease;
            cursor: pointer;
            padding: 5px 10px;
            text-decoration: none;
        }
        .nav-button .icon {
            font-size: 22px;
            margin-bottom: 4px;
        }
        .nav-button:hover {
            color: var(--text-color);
        }
        .nav-button.active {
            color: var(--primary-color);
            transform: scale(1.1);
        }
        .action-button {
            width: 100%;
            padding: 15px;
            border-radius: 12px;
            border: none;
            font-size: 16px;
            font-weight: 700;
            margin-top: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .primary-button {
            background: var(--primary-color);
            color: #000;
        }
        .primary-button:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 105, 180, 0.3);
        }
        .secondary-button {
            background: var(--secondary-color);
            color: var(--primary-color);
        }
        .secondary-button:hover {
            background: #3a3a3e;
        }
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s;
        }
        .modal-overlay.active {
            display: flex;
        }
        .modal-content {
            background: var(--card-bg);
            padding: 25px;
            border-radius: 16px;
            width: 90%;
            max-width: 320px;
            text-align: center;
            animation: slideIn 0.3s;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        @keyframes slideIn {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        .modal-content h3 {
            margin-top: 0;
            font-size: 20px;
            color: var(--text-color);
        }
        .modal-content p {
            color: var(--text-muted-color);
            margin-bottom: 25px;
        }
        .modal-actions {
            display: flex;
            gap: 10px;
        }
        /* Admin Panel Specific Styles */
        .admin-panel {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 15px;
            margin-bottom: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .admin-panel h3 {
            margin: 0 0 15px 0;
            font-size: 18px;
            font-weight: 700;
        }
        .admin-panel ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .admin-panel li {
            background: var(--secondary-color);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 8px;
            font-size: 14px;
            color: var(--text-muted-color);
        }
        .back-button {
            margin-bottom: 20px;
            background: var(--secondary-color);
            color: var(--text-muted-color);
            border: none;
            border-radius: 8px;
            padding: 10px 15px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .back-button:hover {
            background: #3a3a3e;
        }
        /* Loading Screen */
        .loader-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--background-color);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        .loader {
            border: 5px solid var(--text-muted-color);
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        #banner-ad-container {
            width: 100%;
            text-align: center;
            margin-top: 20px;
        }
        .input-group {
            margin-bottom: 15px;
            text-align: left;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
            color: var(--text-muted-color);
            font-size: 14px;
        }
        .input-group input {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--secondary-color);
            background: var(--secondary-color);
            color: var(--text-color);
            font-size: 16px;
        }
        .input-group input:focus {
            outline: none;
            border-color: var(--primary-color);
        }
    </style>
</head>
<body>

    <div class="loader-overlay" id="loader-overlay">
        <div class="loader"></div>
    </div>

    <div class="container" style="display: none;" id="main-container">
        <main id="main-content">
            <div id="home-view" class="view active">
                <div class="user-header-card">
                    <div class="user-avatar" id="profile-pic">AU</div>
                    <div class="user-info">
                        <h2 class="username" id="username">Loading...</h2>
                        <p class="title">Welcome Back!</p>
                    </div>
                </div>
                <div class="balance-card">
                    <p class="label">Total Balance</p>
                    <h1 class="balance-value" id="balance-value">$0.00</h1>
                    <p class="points-value"><i class="fa-solid fa-coins"></i> <span id="points-value">0</span> Points</p>
                </div>
                <h2 class="section-title">Quick Actions</h2>
                <div class="task-card" onclick="showView('tasks-view')">
                    <div class="task-icon"><i class="fa-solid fa-list-check"></i></div>
                    <div class="task-details">
                        <h3>View Tasks</h3>
                        <p>Watch ads and complete tasks to earn points.</p>
                    </div>
                    <div class="task-arrow"><i class="fa-solid fa-chevron-right"></i></div>
                </div>
                <div class="task-card" onclick="openWithdrawModal()">
                    <div class="task-icon"><i class="fa-solid fa-wallet"></i></div>
                    <div class="task-details">
                        <h3>Withdraw Funds</h3>
                        <p>Request to withdraw your available balance.</p>
                    </div>
                    <div class="task-arrow"><i class="fa-solid fa-chevron-right"></i></div>
                </div>
            </div>

            <div id="tasks-view" class="view">
                <h2 class="section-title">Earning Tasks</h2>
                <div class="task-card" onclick="showRewardedInterstitial()">
                    <div class="task-icon"><i class="fa-solid fa-rectangle-ad"></i></div>
                    <div class="task-details">
                        <h3>Rewarded Interstitial</h3>
                        <p>Watch a full-screen ad to earn points.</p>
                    </div>
                    <div class="task-arrow"><i class="fa-solid fa-play"></i></div>
                </div>
                <div class="task-card" onclick="showRewardedPopup()">
                    <div class="task-icon"><i class="fa-solid fa-window-restore"></i></div>
                    <div class="task-details">
                        <h3>Rewarded Popup</h3>
                        <p>View a popup ad for quick points.</p>
                    </div>
                    <div class="task-arrow"><i class="fa-solid fa-play"></i></div>
                </div>
                <h2 class="section-title" style="margin-top: 30px;">More Ads</h2>
                <p style="text-align: center; color: var(--text-muted-color);">View the banner ad below for more earning opportunities.</p>
                <div id="banner-ad-container">
                    </div>
            </div>

            <div id="leaderboard-view" class="view">
                <h2 class="section-title">Top Earners</h2>
                <div id="leaderboard-list">
                    </div>
            </div>

            <div id="history-view" class="view">
                <h2 class="section-title">Recent Activity</h2>
                <div id="history-list">
                    </div>
            </div>

            <div id="admin-view" class="view">
                <button class="back-button" onclick="showView('home-view')"><i class="fa-solid fa-chevron-left"></i> Back</button>
                <h2 class="section-title">Admin Panel</h2>

                <div class="admin-panel">
                    <h3>Withdrawal Requests</h3>
                    <ul id="withdrawal-requests">
                        <li>No requests yet.</li>
                    </ul>
                </div>

                <div class="admin-panel">
                    <h3>Users</h3>
                    <ul id="user-list">
                        <li>No users found.</li>
                    </ul>
                </div>
            </div>
        </main>

        <nav class="footer-nav">
            <button class="nav-button active" onclick="showView('home-view')"><i class="icon fa-solid fa-house"></i>Home</button>
            <button class="nav-button" onclick="showView('tasks-view')"><i class="icon fa-solid fa-list-check"></i>Tasks</button>
            <button class="nav-button" onclick="showView('leaderboard-view')"><i class="icon fa-solid fa-trophy"></i>Leaders</button>
            <button class="nav-button" onclick="showView('history-view')"><i class="icon fa-solid fa-clock-rotate-left"></i>History</button>
            <button class="nav-button" onclick="shareApp()"><i class="icon fa-solid fa-share-nodes"></i>Share</button>
            <button id="admin-button" class="nav-button" style="display:none;" onclick="showAdminView()"><i class="icon fa-solid fa-user-gear"></i>Admin</button>
        </nav>
    </div>

    <div class="modal-overlay" id="withdraw-modal">
        <div class="modal-content">
            <h3>Confirm Withdrawal</h3>
            <p>Enter your Binance Pay ID to receive your funds.</p>
            <div class="input-group">
                <label for="binance-pay-id">Binance Pay ID</label>
                <input type="text" id="binance-pay-id" placeholder="Enter your Binance Pay ID">
            </div>
            <div class="modal-actions">
                <button class="action-button secondary-button" onclick="closeWithdrawModal()">Cancel</button>
                <button class="action-button primary-button" onclick="requestWithdraw()">Confirm</button>
            </div>
        </div>
    </div>
    
    <script src='//libtl.com/sdk.js' defer data-zone='9717747' data-sdk='show_9717747'></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <script>
        // --- State Variables ---
        let points = 0;
        let balance = 0.00;
        let historyLog = [];
        let tgUser = null;
        const pointsPerAd = 1;

        // --- Admin & Minimum Withdrawal Settings (You can change these values) ---
        const ADMIN_USER_ID = '7390932497'; // আপনার অ্যাডমিন আইডি
        const MIN_WITHDRAW_USD = 0.05; // আপনার মিনিমাম উত্তোলন পরিমাণ
        const ratePerPoint = 0.002; // প্রতি পয়েন্টের জন্য ডলারের পরিমাণ
        
        // --- Admin Panel Data (Placeholder, not real data) ---
        const fakeUsers = [
            { id: 1, name: "User One", balance: 10.50 },
            { id: 2, name: "User Two", balance: 25.00 },
            { id: 3, name: "User Three", balance: 4.25 },
        ];
        const fakeWithdrawalRequests = [
            { id: 101, userId: 1, amount: 10.50, status: "Pending" },
            { id: 102, userId: 2, amount: 25.00, status: "Pending" },
        ];


        // --- Core App Logic ---
        document.addEventListener('DOMContentLoaded', () => {
            // Unconditionally show the main content after 1 second, regardless of script loading status
            setTimeout(() => {
                document.getElementById('loader-overlay').style.display = 'none';
                document.getElementById('main-container').style.display = 'flex';
            }, 1000); 
            
            initApp();
        });

        function initApp() {
            try {
                if (window.Telegram && Telegram.WebApp) {
                    Telegram.WebApp.ready();
                    Telegram.WebApp.expand();
                    tgUser = Telegram.WebApp.initDataUnsafe.user;
                }
                
                if (tgUser && tgUser.id == ADMIN_USER_ID) {
                    document.getElementById('admin-button').style.display = 'flex';
                }
            } catch (e) {
                console.error("Telegram Web App initialization error:", e);
            }

            loadData();
            loadTelegramUser();
            showView('home-view');
            renderLeaderboard();
            
            // Try to initialize Monetag ads without blocking the UI
            try {
                startAutomaticAds();
                loadBannerAd();
            } catch (e) {
                console.error("Monetag ad initialization error:", e);
            }
        }

        // --- Load Banner Ad ---
        function loadBannerAd() {
            const bannerAdContainer = document.getElementById('banner-ad-container');
            if (bannerAdContainer) {
                bannerAdContainer.innerHTML = `<script async="async" data-cfasync="false" src="//libtl.com/sdk.js?zone=YOUR_BANNER_ZONE_ID"></script>`;
            }
        }

        // --- Start Automatic Ads ---
        function startAutomaticAds() {
            if (typeof show_9717747 === 'function') {
                show_9717747({
                  type: 'inApp',
                  inAppSettings: {
                    frequency: 2,
                    capping: 0.1,
                    interval: 30,
                    timeout: 5,
                    everyPage: false
                  }
                });
            } else {
                console.warn("Monetag SDK not ready for In-App Ads.");
            }
        }

        // --- Show Rewarded Ads ---
        function showRewardedInterstitial() {
            if (typeof show_9717747 !== 'function') {
                return alert('Ad provider is not ready. Please try again in a moment.');
            }
            show_9717747().then(() => {
                grantReward();
            }).catch(e => {
                alert('Ad could not be shown.');
            });
        }
        
        function showRewardedPopup() {
            if (typeof show_9717747 !== 'function') {
                return alert('Ad provider is not ready. Please try again in a moment.');
            }
            show_9717747('pop').then(() => {
                grantReward();
            }).catch(e => {
                alert('Ad could not be shown.');
            });
        }

        // --- View Management ---
        function showView(viewId) {
            document.querySelectorAll('.view').forEach(view => view.classList.remove('active'));
            document.getElementById(viewId).classList.add('active');
            
            document.querySelectorAll('.nav-button').forEach(btn => btn.classList.remove('active'));
            const activeBtn = document.querySelector(`.nav-button[onclick="showView('${viewId}')"]`);
            if(activeBtn) activeBtn.classList.add('active');
            
            if (viewId === 'history-view') renderHistory();
        }
        
        // New function to show admin panel
        function showAdminView() {
            showView('admin-view');
            renderAdminPanel();
        }

        // --- Data Persistence ---
        function loadData() {
            const savedData = localStorage.getItem('easyEarningBotV2');
            if (savedData) {
                const data = JSON.parse(savedData);
                points = data.points || 0;
                balance = data.balance || 0.00;
                historyLog = data.historyLog || [];
            }
            updateDisplay();
        }

        function saveData() {
            localStorage.setItem('easyEarningBotV2', JSON.stringify({ points, balance, historyLog }));
        }

        function updateDisplay() {
            document.getElementById('points-value').textContent = points;
            document.getElementById('balance-value').textContent = `$${balance.toFixed(2)}`;
        }

        // --- User & Profile ---
        function loadTelegramUser() {
            if (tgUser) {
                document.getElementById('username').textContent = tgUser.first_name || 'Telegram User';
                const profilePicDiv = document.getElementById('profile-pic');
                if (tgUser.photo_url) {
                    profilePicDiv.innerHTML = `<img src="${tgUser.photo_url}" alt="P">`;
                } else {
                    profilePicDiv.textContent = (tgUser.first_name || 'U').charAt(0);
                }
            }
        }

        // --- History Logic ---
        function addToHistory(type, detail) {
            const timestamp = new Date().toISOString();
            historyLog.unshift({ type, detail, timestamp });
            if (historyLog.length > 50) historyLog.pop();
            saveData();
        }

        function renderHistory() {
            const list = document.getElementById('history-list');
            if (historyLog.length === 0) {
                list.innerHTML = `<div class="list-item"><div class="info"><div class="name">No activity yet.</div><div class="detail">Watch some ads to get started!</div></div></div>`;
                return;
            }
            
            list.innerHTML = historyLog.map(item => {
                const icon = item.type === 'earn'
                    ? '<i class="fa-solid fa-plus-circle" style="color: var(--primary-color);"></i>'
                    : '<i class="fa-solid fa-paper-plane" style="color: var(--accent-color);"></i>';
                return `
                    <div class="list-item">
                        <div class="history-icon">${icon}</div>
                        <div class="info">
                            <div class="name">${item.detail}</div>
                            <div class="detail">${new Date(item.timestamp).toLocaleString()}</div>
                        </div>
                    </div>`;
            }).join('');
        }

        // --- Leaderboard Logic ---
        function renderLeaderboard() {
            const leaderboardData = [
                { name: "CryptoKing", score: 2540, avatar: "https://i.pravatar.cc/150?img=1" },
                { name: "Elena", score: 2210, avatar: "https://i.pravatar.cc/150?img=2" },
                { name: "ProMiner", score: 1980, avatar: "https://i.pravatar.cc/150?img=3" },
                { name: "Aisha", score: 1750, avatar: "https://i.pravatar.cc/150?img=4" },
                { name: "BotMaster", score: 1530, avatar: "https://i.pravatar.cc/150?img=5" },
            ];
            
            document.getElementById('leaderboard-list').innerHTML = leaderboardData.map((user, index) => `
                <div class="list-item">
                    <div class="rank">#${index + 1}</div>
                    <img src="${user.avatar}" class="avatar" alt="Avatar">
                    <div class="info"><div class="name">${user.name}</div></div>
                    <div class="score">${user.score} pts</div>
                </div>
            `).join('');
        }

        // --- Earning Functions ---
        function grantReward() {
            points += pointsPerAd;
            balance = points * ratePerPoint;
            updateDisplay();
            addToHistory('earn', `+${pointsPerAd} Point(s) from Ad`);
            saveData();
            Telegram.WebApp.HapticFeedback.notificationOccurred('success');
            alert(`Congratulations! You've earned +${pointsPerAd} point. Your new balance is $${balance.toFixed(2)}.`);
        }

        // --- Withdrawal Logic ---
        function openWithdrawModal() {
            if (balance < MIN_WITHDRAW_USD) {
                Telegram.WebApp.HapticFeedback.notificationOccurred('error');
                return alert(`Minimum withdrawal amount is $${MIN_WITHDRAW_USD.toFixed(2)}. Keep earning!`);
            }
            document.getElementById('withdraw-modal').classList.add('active');
        }
        
        function closeWithdrawModal() {
            document.getElementById('withdraw-modal').classList.remove('active');
        }

        function requestWithdraw() {
            const binancePayId = document.getElementById('binance-pay-id').value;
            if (!binancePayId) {
                return alert('Please enter your Binance Pay ID.');
            }
            
            closeWithdrawModal();
            const botToken = '8247487496:AAHzEjXtldSF2QlUgs7XGSEq8JDLL4GHbXE';
            const adminUserId = ADMIN_USER_ID;
            const userInfo = tgUser ? `@${tgUser.username} (ID: ${tgUser.id})` : 'Unknown User';
            const message = `💸 *Withdrawal Request*\n\n👤 *User:* ${userInfo}\n💳 *Binance Pay ID:* ${binancePayId}\n💰 *Amount:* $${balance.toFixed(2)}\n\n_Please process this request._`;

            fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: adminUserId, text: message, parse_mode: "Markdown" })
            }).then(res => res.json())
            .then(data => {
                if (data.ok) {
                    Telegram.WebApp.HapticFeedback.notificationOccurred('success');
                    alert("Your withdrawal request has been sent successfully!");
                    addToHistory('withdraw', `Request for $${balance.toFixed(2)} to Binance ID: ${binancePayId}`);
                } else {
                    Telegram.WebApp.HapticFeedback.notificationOccurred('error');
                    alert("Failed to send request. Please try again later.");
                }
            }).catch(err => {
                Telegram.WebApp.HapticFeedback.notificationOccurred('error');
                alert("An error occurred. Check your connection and try again.");
            });
        }

        // --- Share & Referral ---
        function shareApp() {
            if (!tgUser) return alert("Could not get user data from Telegram.");
            const botUsername = "AdsEarnUsdtbot";
            const referralLink = `https://t.me/${botUsername}?start=${tgUser.id}`;
            const text = `🎉 Join this amazing bot and start earning! Use my link to get a special bonus:`;
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(text)}`;
            Telegram.WebApp.openTelegramLink(shareUrl);
        }
        
        // --- Admin Panel Render Functions (New!) ---
        function renderAdminPanel() {
            // Render Users
            const userList = document.getElementById('user-list');
            userList.innerHTML = fakeUsers.map(user => `<li>User ID: ${user.id} | Balance: $${user.balance.toFixed(2)}</li>`).join('');

            // Render Withdrawal Requests
            const withdrawalRequests = document.getElementById('withdrawal-requests');
            withdrawalRequests.innerHTML = fakeWithdrawalRequests.map(req => `<li>Request ID: ${req.id} | User ID: ${req.userId} | Amount: $${req.amount.toFixed(2)} | Status: ${req.status}</li>`).join('');
        }
    </script>
</body>
</html>
